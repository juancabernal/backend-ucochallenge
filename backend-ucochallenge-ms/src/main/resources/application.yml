spring:
  application:
    name: UcoChallenge

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://${DATABASE_HOST:localhost}:${DATABASE_PORT:5432}/${DATABASE_NAME:ucochallenge}}
    driver-class-name: ${SPRING_DATASOURCE_DRIVER:org.postgresql.Driver}
    hikari:
      pool-name: ${SPRING_DATASOURCE_POOL_NAME:UcoHikariPool}
      maximum-pool-size: ${SPRING_DATASOURCE_MAX_POOL_SIZE:10}
      minimum-idle: ${SPRING_DATASOURCE_MIN_IDLE:1}
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}

server:
  port: 8081

# =========================
# ✅ Eureka (NO estaba en el 2do)
# =========================
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true

# =========================
# ✅ Azure Key Vault (ya estaba)
# =========================
azure:
  keyvault:
    url: https://uco-vault-secrets.vault.azure.net/

# ✅ Fallbacks si Key Vault falla
secrets:
  db-username: ${DB_USERNAME:postgres}
  db-password: ${DB_PASSWORD:postgres}

# =========================
# ✅ Servicios REST internos (del 1er YAML)
# =========================
services:
  message:
    base-url: http://localhost:8082/api/v1/messages
  parameters:
    base-url: http://localhost:8083/api/v1/parameters

# =========================
# ✅ Logging con TraceId y SpanId (del 1er YAML)
# =========================
logging:
  level:
    root: INFO
    org.hibernate.SQL: DEBUG
    com.azure.identity: INFO
    co.edu.uco.ucochallenge.infrastructure.secondary.secret: DEBUG
  pattern:
    level: "%5p [traceId=%X{traceId:-}, spanId=%X{spanId:-}]"

# =========================
# ✅ Management + Tracing + Prometheus + OTLP (Fusión de ambos)
# =========================
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: always  # puedes cambiar a "when_authorized" si lo quieres seguro

  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true

  tracing:
    enabled: ${MANAGEMENT_TRACING_ENABLED:true}  # en el 1° estaba true
    sampling:
      probability: 1.0  # para desarrollo, todo se traza
    exporter:
      otlp:
        enabled: true
        endpoint: http://localhost:4318/v1/traces
        compression: gzip

# =========================
# ✅ Configuración de IA (segunda versión)
# =========================
uco-challenge:
  ai:
    openai:
      enabled: ${AI_OPENAI_ENABLED:false}
      endpoint: ${AI_OPENAI_ENDPOINT:https://api.openai.com/v1/responses}
      api-key: ${AI_OPENAI_API_KEY:}
      model: ${AI_OPENAI_MODEL:gpt-4o-mini}
      temperature: ${AI_OPENAI_TEMPERATURE:0.2}
